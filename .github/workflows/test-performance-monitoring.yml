name: Test Performance Monitoring
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # schedule:
  #   # Run performance check daily at 2 AM UTC
  #   - cron: '0 2 * * *'
jobs:
  performance-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-tier: [fast, integration]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install GifLab
      run: poetry install --no-interaction
      
    - name: Run Performance-Monitored Tests
      run: |
        python scripts/monitor_test_performance.py ${{ matrix.test-tier }} \
          --config scripts/test-performance-config.json
      
    - name: Upload Performance History
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-performance-history-${{ matrix.test-tier }}
        path: test-performance-history.json
        retention-days: 30
        
    - name: Performance Regression Check
      if: failure()
      run: |
        echo "❌ Performance regression detected in ${{ matrix.test-tier }} tests"
        echo "Check the job logs for detailed performance analysis"
        exit 1
  performance-report:
    runs-on: ubuntu-latest
    needs: performance-check
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Performance Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./performance-data
        
    - name: Generate Performance Summary
      run: |
        echo "## 📊 Test Performance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for tier in fast integration; do
          if [ -f "./performance-data/test-performance-history-${tier}/test-performance-history.json" ]; then
            echo "### ${tier^} Tests" >> $GITHUB_STEP_SUMMARY
            # Extract latest performance data (would need a proper parser in real implementation)
            echo "- Performance data collected ✅" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ${tier^} Tests" >> $GITHUB_STEP_SUMMARY
            echo "- No performance data available ❌" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "📈 Historical performance data retained for 30 days" >> $GITHUB_STEP_SUMMARY
